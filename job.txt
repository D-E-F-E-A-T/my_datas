
python伪多线程 (GIL)
1.线程拿到 GIL 才能进入 cpu 执行,一个进程只有一个。
2.在python2.x里GIL 释放逻辑是当前线程遇见IO操作，或者ticks计数达到100（专门针对 GIL），python3.x ticks不计次 而是 计时 对 cpu密集型友好
3.GIL锁竞争，切换线程会资源消耗
4.多线程适合 IO密集型(文件处理, 网络爬虫等,需要时间的等待) 等待时间切换线程

高并发:
1.Nginx要做负载均衡 
2.程序层面做多线程，锁等机制 
3.数据库层面处理，mysql+redis 
4.服务器配置要尽量高

python 内存 （GC模块用引用计数跟踪和回收垃圾）
1.引用: 对象的引用被使用   优点:实时性:当引用为零 消除对象释放内存  缺点:引用计数会有额外内存使用, 循环引用 引用不为0 这部分资源无法释放。
2.标记清除: 循环引用多出现在可变变量（list,dict）等，从根对象进行检测, 根对象中的引用能找到的对象不删除，没引用的对象删除.
3.分代回收:按照对象的存在时间进行区分（python自分三分) 时间越低的 垃圾回收频率事件越高, 经历垃圾回收的次数判定.

事务 (一系列操作，都必须完成，否则撤销所有操作)  [ACID]
1.A 原子性: 数据库的逻辑工作单位,包含的操作要么都做，或都不做。
2.C 一致性: 必须从一个一致性状态到另一个一致性状态,事务执行被中断，但是物理数据库已经有所更改，数据库此时就是不一致性状态。
3.I 隔离性: 一个事务内部操作和使用的数据对其它并发的事务是隔离的，并发执行的各个事务之间不能互相干扰。
4.D 持续性: 永久性,事务一旦提交对数据库的改变是永久的。其它任何因素不应该对其产生影响.

数据库 （关系 非关系）
mongodb:  数据存在硬盘 (实际操作发生在内存，mmap映射)
redis: 纯内存 :(持久化: 1.rdb, 2.aof) 1.保存执行语句 2.备份
mysql: 数据和索引均在硬盘 

MYSQL 的优化
1.表字段少，字段值默认不设置null(0或)， 数值型 > 字符型
2.用join子查询避免事务或表锁死，完成多个逻辑，mysql不需要在内存中建临时表。 子查询查出的数据直接输出给下个查询  (mysql 4.1开始支持)
3.用联合查询代替手动创建临时表 (mysql 4.0)
4.事务(需要多个sql语句执行保证数据安全和一致性, 大量使用数据库时较差)
5.锁定表(补足事务的不足)
6.  使用索引：原理 --> 索引是一种高效获取数据的存储结构:hash、 二叉、 红黑
    ==> （mysql）B+Tree 结构  
    引擎：1.Myisam(非聚集索引):
         2. Innodb(聚集索引): 









